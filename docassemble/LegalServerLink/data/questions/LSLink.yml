---
modules:
  - .LSAPIs
---
comment:
  title: |
    LegalServer Docassemble Link
  short title: |
    LS Link
  description: |
    This interview links Docassemble to LegalServer through LegalServer's APIs.
  authors:
    - name: LegalServer
      organization: Network Ninja, Inc.
  revision_date: 2023-09-12
---
if: client_is_organization
objects:
  - client: Person
---
objects:
  - client: Individual
  - legalserver_case: DAObject
  - legalserver_assignments: DAList.using(object=DAObject, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - legalserver_services: DAList.using(object=DAObject, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - legalserver_documents: DAList.using(object=DAObject, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - legalserver_litigations: DAList.using(object=DAObject, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - legalserver_charges: DAList.using(object=DAObject, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - legalserver_contacts: DAList.using(object=Individual, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - legalserver_incomes: DAList.using(object=DAObject, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - legalserver_notes: DAList.using(object=DAObject, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - legalserver_events: DAList.using(object=DAObject, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - legalserver_tasks: DAList.using(object=DAObject, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - client.additional_names: DAList.using(object=IndividualName, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - legalserver_associated_cases: DAList.using(object=DAObject, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - legalserver_adverse_parties: DAList.using(object=Person, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - legalserver_non_adverse_parties: DAList.using(object=Person, there_are_any=True, auto_gather=False, complete_attribute='complete')
  - legalserver_primary_assignment: Individual
  - legalserver_first_pro_bono_assignment: Individual
  - legalserver_latest_pro_bono_assignment: Individual
  - legalserver_pro_bono_assignments: DAList.using(object=Individual, there_are_any=False, auto_gather=False, complete_attribute='complete')
  - legalserver_current_user: Individual
---
question: LegalServer Site and Case
fields:
  - What is the LegalServer Case UUID?: legalserver_matter_uuid
  - What is the LegalServer site abbreviation: legalserver_site_abbreviation
  - What is the LegalServer site type: legalserver_site_type
    input type: radio
    choices:
      code: legalserver_site_type_list
---
code: |
  legalserver_site_type_list = ['Live', 'Demo']
  if 'docassemble-dev.legalserver' in interview_url():
    legalserver_site_type_list.append('Test')
    legalserver_site_type_list.append('Dev')
---
question: LegalServer Current User
fields:
  - What is the LegalServer Current User UUID?: legalserver_current_user_uuid
comment: |
  default: c285b062-4c39-4a50-9c49-e516a91e7556
---
question: |
  Data
subquestion: |
  Client: ${ client }

  Is this a Group Client: ${ legalserver_data.get('is_group') }

continue button field: testing
---
code: |
  if legalserver_site_type.lower() == 'live':
    legalserver_site = legalserver_site_abbreviation.lower()
  elif legalserver_site_type.lower() == 'demo':
    legalserver_site = legalserver_site_abbreviation.lower() + "-demo"
  elif legalserver_site_type.lower() == 'test' or legalserver_site_type.lower() == 'dev':
    legalserver_site = legalserver_site_abbreviation.lower() + "." + legalserver_site_type.lower()
  set_legalserver_site = True
---
code: |
  checked_for_stashed_data
  legalserver_matter_uuid
  set_legalserver_site
  raise_errors_getting_legalserver_data
  collect_initial_legalserver_data = True
---
code: |
  stashed_secret = url_args.get('stashed_secret', None)
  stashed_key = url_args.get('stashed_key', None)
  if stashed_secret and stashed_key:
    stored_data = retrieve_stashed_data(stashed_key, stashed_secret, delete=True )
    if stored_data:
      parse_stored_variables = set_variables(stored_data)
      log('Stored Data imported Successfully')
  checked_for_stashed_data = True
---
code: |
  token_check = check_legalserver_token(legalserver_site=legalserver_site)
  if 'error' in token_check:
    check_legalserver_token_exists = False
    legalserver_error_source.append({'source':'Token', 'error': token_check['error']})
  else:
    check_legalserver_token_exists = True
---
question: |
  LegalServer Data Error
subquestion: |
  The attempt to get case data resulted in an error.

  % for item in legalserver_error_source:
  * ${ item['source']} - ${ str(item['error']) }.
  % endfor
buttons:
  - Exit: exit
  - Restart: restart
event: legalserver_data_error_ending
---
code: |
  legalserver_error_source = []
---
code: |
  legalserver_data = get_matter_details(legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid, custom_fields=[], custom_fields_services=[], custom_fields_litigations=[], custom_fields_charges=[])
  if 'error' in legalserver_data:
    legalserver_data_error = True
    legalserver_error_source.append({'source':'Matter Details', 'error': legalserver_data['error']})
  else:
    legalserver_data_error = False
---
code: |
  if legalserver_data.get('is_group'):
    client_is_organization = True
  else:
    client_is_organization = False
  check_for_legalserver_client_organization = True
---
code: |
  check_for_legalserver_client_organization
  raise_errors_getting_legalserver_data
  populate_client(client=client, legalserver_data=legalserver_data)
  parse_client_data = True
---
code: |
  if not check_legalserver_token_exists:
    legalserver_data_error_ending
  if legalserver_data_error:
    legalserver_data_error_ending
  raise_errors_getting_legalserver_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_litigations(litigation_list=legalserver_litigations, legalserver_data=legalserver_data, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_litigation_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_documents(document_list=legalserver_documents, legalserver_data=legalserver_data, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_document_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_adverse_parties(adverse_party_list=legalserver_adverse_parties, legalserver_data=legalserver_data, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_adverse_party_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_non_adverse_parties(non_adverse_party_list=legalserver_non_adverse_parties, legalserver_data=legalserver_data, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_non_adverse_party_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_income(income_list=legalserver_incomes, legalserver_data=legalserver_data, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_income_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_notes(note_list=legalserver_notes, legalserver_data=legalserver_data, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_note_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_assignments(assignment_list=legalserver_assignments, legalserver_data=legalserver_data, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_assignment_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_charges(charge_list=legalserver_charges, legalserver_data=legalserver_data, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_charge_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_case(case=legalserver_case, legalserver_data=legalserver_data)
  parse_legalserver_case_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_services(services_list=legalserver_services, legalserver_data=legalserver_data, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_service_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_events(event_list=legalserver_events, legalserver_data=legalserver_data, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_event_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_tasks(task_list=legalserver_tasks, legalserver_data=legalserver_data, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_task_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_associated_cases(associated_case_list=legalserver_associated_cases, legalserver_data=legalserver_data, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_associated_cases_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_contacts(contact_list=legalserver_contacts, legalserver_data=legalserver_data, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_contact_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_additional_names(additional_name_list=client.additional_names, legalserver_site=legalserver_site, legalserver_matter_uuid=legalserver_matter_uuid)
  parse_legalserver_additional_name_data = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_pro_bono_assignments(pro_bono_assignment_list=legalserver_pro_bono_assignments,assignment_list=legalserver_assignments,legalserver_data=legalserver_data, legalserver_matter_uuid=legalserver_matter_uuid, legalserver_site = legalserver_site)
  number_of_pro_bono_assignments = count_of_pro_bono_assignments(pro_bono_assignment_list=legalserver_pro_bono_assignments)
  if number_of_pro_bono_assignments > 0:
    populate_latest_pro_bono_assignment(legalserver_latest_pro_bono_assignment=legalserver_latest_pro_bono_assignment,assignment_list=legalserver_assignments,legalserver_data=legalserver_data, legalserver_matter_uuid=legalserver_matter_uuid, legalserver_site = legalserver_site)
    populate_first_pro_bono_assignment(legalserver_first_pro_bono_assignment=legalserver_first_pro_bono_assignment,assignment_list=legalserver_assignments,legalserver_data=legalserver_data, legalserver_matter_uuid=legalserver_matter_uuid, legalserver_site = legalserver_site)
  parse_legalserver_pro_bono_assignments = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_primary_assignment(primary_assignment=legalserver_primary_assignment,assignment_list=legalserver_assignments,legalserver_data=legalserver_data, legalserver_matter_uuid=legalserver_matter_uuid, legalserver_site = legalserver_site)
  parse_legalserver_primary_assignment = True
---
code: |
  raise_errors_getting_legalserver_data
  populate_current_user(legalserver_current_user=legalserver_current_user, legalserver_current_user_uuid=legalserver_current_user_uuid, legalserver_site = legalserver_site)
  parse_legalserver_current_user = True
---
code: |
  raise_errors_getting_legalserver_data
  parse_client_data
  parse_legalserver_assignment_data
  parse_legalserver_income_data
  parse_legalserver_document_data
  parse_legalserver_litigation_data
  parse_legalserver_note_data
  parse_legalserver_charge_data
  parse_legalserver_case_data
  parse_legalserver_service_data
  parse_legalserver_event_data
  parse_legalserver_task_data
  parse_legalserver_contact_data
  parse_legalserver_additional_name_data
  parse_legalserver_adverse_party_data
  parse_legalserver_non_adverse_party_data
  parse_legalserver_primary_assignment
  parse_legalserver_pro_bono_assignments
  parse_legalserver_current_user
  parse_legalserver_associated_cases_data
  parse_all_legalserver_data = True
